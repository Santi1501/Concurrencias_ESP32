SemaphoreHandle_t mySemaphore;
#define RED_1 14
#define YELLOW_1 12
#define GREEN_1 13
#define RED_0 32
#define YELLOW_0 35
#define GREEN_0 34
bool volatile semaforoActivo = true;

void setup() {
  
  mySemaphore = xSemaphoreCreateMutex();

  Serial.begin(9600);
  xTaskCreatePinnedToCore(
  semaphore1, // Referencia a la funcion que vamos a ejecutar
  "Task_Core1", // Nombre para la funcion, sirve solamente para propositos de debugging
  4096, // Tamaño del stack la tarea
  NULL, // Parametro que recibe la funcion que le vamos a pasar
  1, // Prioridad de la tarea
  NULL, // no es importante
  1 // El core donde queremos que corra la task (0/1)
  );

  xTaskCreatePinnedToCore(
  semaphore0, // Referencia a la funcion que vamos a ejecutar
  "Task_Core0", // Nombre para la funcion, sirve solamente para propositos de debugging
  4096, // Tamaño del stack la tarea
  NULL, // Parametro que recibe la funcion que le vamos a pasar
  1, // Prioridad de la tarea
  NULL, // no es importante
  0 // El core donde queremos que corra la task (0/1)
  );

  pinMode(YELLOW_1, OUTPUT);
  pinMode(GREEN_1, OUTPUT);
  pinMode(RED_1, OUTPUT);

  pinMode(YELLOW_0, OUTPUT);
  pinMode(GREEN_0, OUTPUT);
  pinMode(RED_0, OUTPUT);

  digitalWrite(YELLOW_1, HIGH);
  digitalWrite(GREEN_1, HIGH);
  digitalWrite(RED_1, HIGH);

  digitalWrite(YELLOW_0, HIGH);
  digitalWrite(GREEN_0, HIGH);
  digitalWrite(RED_0, HIGH);
}

/*void taskFunction(void * pvParameters) {

  for(;;){

    int Resultado = xPortGetCoreID(); 
    vTaskDelay(pdMS_TO_TICKS(1000));
    Serial.println(Resultado);
  }
}*/

void semaphore1(void * pvParameters) {

  for(;;){

    if(xSemaphoreTake(mySemaphore, portMAX_DELAY) == pdTRUE) {

      digitalWrite(RED_1, LOW);
      digitalWrite(GREEN_1, HIGH);
      delay(3500);

      digitalWrite(GREEN_1, LOW);
      digitalWrite(YELLOW_1, HIGH);
      delay(1000);

      digitalWrite(RED_1, HIGH);
      digitalWrite(YELLOW_1, LOW);
      delay(3500);

      semaforoActivo =false;
    }

    xSemaphoreGive(mySemaphore);
  }
}

void semaphore0(void * pvParameters) {

  for(;;){

    if(xSemaphoreTake(mySemaphore, portMAX_DELAY) == pdTRUE) {

      digitalWrite(RED_0, LOW);
      digitalWrite(GREEN_0, HIGH);
      delay(3500);

      digitalWrite(GREEN_0, LOW);
      digitalWrite(YELLOW_0, HIGH);
      delay(1000);

      digitalWrite(RED_0, HIGH);
      digitalWrite(YELLOW_0, LOW);
      delay(3500);

      semaforoActivo=true;
      }

    xSemaphoreGive(mySemaphore);
  }
}

void loop() {
  
}